
</div>
</main>
<footer class="bg-teal-700 p-10 mt-24 text-white">
	<a href="https://github.com/dario-baumberger/accessibility-crash-course" target="_blank" class="w-4 h-4 block m-auto mt-10 mb-10">
		<svg aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github" class="svg-inline--fa fa-github fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><path fill="currentColor" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg>
		<span class="sr-only">Github Repository</span>
	</a>
	<p class="text-center"> 
		<small>
			Made by Dario Baumberger 2020
		</small>
	</p>
</footer>
<script>

	const navLinks = document.querySelectorAll(".js-section-links a");

	for (const link of navLinks) {
		link.addEventListener("click", clickHandler);
	}


	function clickHandler(e) {
		e.preventDefault();
		const href = this.getAttribute("href").match('\\#(.*)')[0];
		const offsetTop = document.querySelector(href).offsetTop - 50;

		window.location.hash = href;

		scroll({
			top: offsetTop,
			behavior: "smooth"
		});
	}

	let menuSection = document.querySelectorAll('aside nav a');
	let mainHeadings = document.querySelectorAll(".markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6");

	const quickSort = function quickSort(data) { // no optimizations
		const partition = function partition(data, lo, hi) {
			const pivot = data[hi]
			let i = lo
			for (let j = lo; j < hi; j++) {
				if (data[j] < pivot) {
					data[i] = data[j] - data[i] + (data[j] = data[i]);
					i++
				}
			}
			// swap
			data[i] = data[hi] - data[i] + (data[hi] = data[i]);
			return i
		};

		const sort = function sort(data, lo, hi) {
			if (lo < hi) {
				let p = partition(data, lo, hi)
				sort(data, lo, p - 1)
				sort(data, p + 1, hi)
			}
		};
		sort(data, 0, data.length - 1)
	}

	const flatten = function flatten(arr) {
		const reduce = Array.prototype.reduce
		return reduce.call(arr, function(acc, val) {
			return Array.isArray(val) || typeof val[Symbol.iterator] === "function" ? acc.concat(flatten(val)) : acc.concat(val);
		}, [])
	}

		const elOffsetIndex = {}
		const h1 = document.querySelectorAll(".markdown-body h1")
		const h2 = document.querySelectorAll(".markdown-body h2")
		const h3 = document.querySelectorAll(".markdown-body h3")
		const h4 = document.querySelectorAll(".markdown-body h4")
		let h = flatten([h1, h2, h3, h4])
		const offset = 0;

		window.addEventListener("DOMContentLoaded", function() {
			// without this event, the `offsetTop` value may not be right
			// as document may not have finished rendering
			const offsets = []


			// Time Complexity: O(n) => O(h.length)
			for (var i = 0; i < h.length; i++) {

				let hOffset = h[i].offsetTop + offset;
				offsets.push(hOffset);
				elOffsetIndex[hOffset] = h[i];
			}

			// Time Complexity: O(n log(n)) => O(h.length log(h.length))
			quickSort(offsets)


			document.addEventListener("scroll", function() {
				const scrollTop = this.documentElement.scrollTop

				// Time Complexity: worst case O(n) => O(offsets.length)
				for (var i in offsets) {
					if (scrollTop >= offsets[i]) {
						elOffsetIndex[offsets[i]].classList.add("active")
						break
					}
				}
			})
		})

</script>
</body>
</html>
